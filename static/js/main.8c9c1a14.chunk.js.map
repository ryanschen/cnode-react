{"version":3,"sources":["serviceWorker.js","axios/index.js","components/Nav/index.js","components/Nav/Nav.jsx","router/index.js","App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","axiosInstance","axios","create","timeout","defaults","baseURL","interceptors","response","use","res","toast_default","a","hide","data","success","alert","JSON","stringify","error","Promise","reject","Nav","react_default","createElement","className","this","props","title","navList","map","nav","index","key","Link","to","concat","path","name","Component","routes","exact","redirect","component","all","__webpack_require__","e","then","bind","Switch","route","Redirect","from","Route","Loadable","loader","loading","HashRouter","basename","components_Nav","router_default","FastClick","attach","document","body","render","src_App_default","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c9c1a14.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios'\nimport { Toast } from 'antd-mobile'\n\nconst axiosInstance = axios.create({\n  timeout: 60000\n})\naxiosInstance.defaults.baseURL = 'https://cnodejs.org/api/v1'\n// 统一处理ajax失败\naxiosInstance.interceptors.response.use(function (res) {\n  Toast.hide()\n  const response = res.data\n  if (!response.success) {\n    alert(JSON.stringify(response))\n    return\n  }\n  return res\n}, function (error) {\n  alert('网络中断了，请重试')\n  Toast.hide()\n  return Promise.reject(error)\n})\n// 用于移动端页面\nwindow.axios = axiosInstance\n","import './Nav.sass'\nimport Nav from './Nav.jsx'\n\nexport default Nav\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class extends Component {\n  render () {\n    return (\n      <header className=\"nav\">\n        <h1 className=\"nav-title\">{this.props.title}</h1>\n        <ul className=\"nav-wrap\">\n          {\n            this.props.navList.map((nav, index) => {\n              return (<li key={index}><Link to={`/${nav.path}`}>{nav.name}</Link></li>)\n            })\n          }\n        </ul>\n      </header>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Route, Redirect, Switch } from 'react-router-dom'\nimport Loadable from 'react-loadable'\n\nconst LoadableComponent = (component) => {\n  return Loadable({\n    loader: component,\n    loading: () => (<span>加载中...</span>)\n  })\n}\n\nconst routes = [\n  { path: '/', exact: true, redirect: '/topics' },\n  { path: '/topics', component: () => import(`@/views/Topics`) },\n  { path: '/getstart', component: () => import(`@/views/Getstart`) },\n  { path: '/about', component: () => import(`@/views/About`) },\n  { path: '/rydemo', component: () => import(`@/views/Rydemo`) },\n  { path: '/detail/:id', component: () => import(`@/views/Detail`) },\n  { path: '*', component: () => import(`@/views/NotFound`) }\n]\n\nexport default class extends Component {\n  render () {\n    return (\n      <Switch>\n        {\n          routes.map((route, index) => {\n            return route.redirect\n              ? (<Redirect\n                  key={index}\n                  exact={route.exact}\n                  from={route.path}\n                  to={route.redirect}\n                />)\n              : (<Route\n                  key={index}\n                  path={route.path}\n                  exact={route.exact}\n                  component={LoadableComponent(route.component)}\n                />)\n          })\n        }\n      </Switch>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { HashRouter } from 'react-router-dom'\nimport Nav from '@/components/Nav'\nimport Routers from '@/router'\nimport '@/assets/styles/App.sass'\n\nconst navList = [\n  { path: 'topics', name: '首页' },\n  { path: 'getstart', name: '新手入门' },\n  { path: 'about', name: '关于' },\n  { path: 'rydemo', name: '组件demo' }\n]\n\nexport default class extends Component {\n  render () {\n    return (\n      <HashRouter basename=\"/\">\n        <div className=\"app\">\n          <Nav navList={navList} title=\"CNode JS\" />\n          <Routers/>\n        </div>\n      </HashRouter>\n    )\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport './axios'\nimport FastClick from 'fastclick'\nimport 'normalize.css'\nimport App from './App.jsx'\n\n// const VConsole = require('vconsole')\n// new VConsole()\n\nif ('ontouchstart' in window) {\n  FastClick.attach(document.body)\n}\n\nrender(\n    <App />,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}